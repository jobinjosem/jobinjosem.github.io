[ { "title": "test post", "url": "/blog/test-post", "categories": "technical-writing, AI", "tags": "azure, kubernetes", "date": "2023-09-01 00:00:00 +0200", "snippet": "", "content": "" }, { "title": "Azure Workload Identity on Kubernetes", "url": "/azure/2023/08/24/azure-workload-identity.html", "categories": "Azure", "tags": "azure, kubernetes", "date": "2023-08-24 11:12:22 +0200", "snippet": "Deployed workloads within Kubernetes clusters necessitate Azure AD application credentials or managed identities for accessing Azure AD protected resources, like Azure Key Vault and Microsoft Graph...", "content": "Deployed workloads within Kubernetes clusters necessitate Azure AD application credentials or managed identities for accessing Azure AD protected resources, like Azure Key Vault and Microsoft Graph. Azure AD Pod Identity, previously offered a means to circumvent the requirement for such secrets through the utilization of Azure managed identities.The open source Azure AD pod-managed identity in AKS has been deprecated and the project will be archived soon. Azure AD workload identity replaces pod-managed identity.In contrast, Azure AD Workload Identity for Kubernetes seamlessly incorporates the Kubernetes capabilities to establish federation with external identity providers. This method is much more simpler and removes the complexity of AAD Pod Identities.Authentication Sequence using OIDCCourtesy: microsoft.comHow to deploy and configure AKS clusterMicrosoft Docs - workload-identity-deploy-clusterHow to retrieve the OIDC Issuer URLaz aks show -n myAKSCluster -g \"${RESOURCE_GROUP}\" --query \"oidcIssuerProfile.issuerUrl\" -otsvBy default, the Issuer is set to use the base URL https://{region}.oic.prod-aks.azure.com/{uuid} where the value for {region} matches the location the AKS cluster is deployed in. The value {uuid} represents the OIDC key.OIDC Endpoints {IssuerURL}/.well-known/openid-configuration Also known as the OIDC discovery document. This contains the metadata about the issuer’s configurations. {IssuerURL}/openid/v1/jwks This contains the public signing key(s) that AAD uses to verify the authenticity of the service account token. Create Federated identity credentialaz identity federated-credential create --name ${FEDERATED_IDENTITY_CREDENTIAL_NAME} --identity-name \"${USER_ASSIGNED_IDENTITY_NAME}\" --resource-group \"${RESOURCE_GROUP}\" --issuer \"${AKS_OIDC_ISSUER}\" --subject system:serviceaccount:\"${SERVICE_ACCOUNT_NAMESPACE}\":\"${SERVICE_ACCOUNT_NAME}\" --audience api://AzureADTokenExchangeService Account token mount locationThe azure identity token is mounted at below location by default but this can be changed in the pod manifests./var/run/secrets/azure/tokens/azure-identity-token The regular kubernetes serviceaccount token is mounted at: /var/run/secrets/kubernetes.io/serviceaccountEnvironment Variables AZURE_AUTHORITY_HOST\tThe Azure Active Directory (AAD) endpoint. AZURE_CLIENT_ID\tThe client ID of the AAD application or user-assigned managed identity. AZURE_TENANT_ID\tThe tenant ID of the registered AAD application or user-assigned managed identity. AZURE_FEDERATED_TOKEN_FILE\tThe path of the projected service account token file.Volume injected by the webhook azure-identity-token\tThe projected service account volume. These values can be verified by running kubectl describe pod commandJump pod manifest for verifying Kubernetes service account tokencat &lt;&lt;EOF | kubectl apply -f -apiVersion: v1kind: Podmetadata: name: jump namespace: ${NAMESPACE}spec: containers: - image: smallstep/step-cli name: step-cli command: - /bin/sh - -c - cat /var/run/secrets/tokens/test-token | step crypto jwt inspect --insecure volumeMounts: - mountPath: /var/run/secrets/tokens name: test-token serviceAccountName: ${SERVICE_ACCOUNT_NAME} volumes: - name: test-token projected: sources: - serviceAccountToken: path: test-token expirationSeconds: 3600 audience: testEOFThe jump pod logs will contain the decoded JWT. Note that the values like audience, expirationSeconds etc can be customized in the manifest while the azure-identity-token behaviour can be modified adding custom labels on the pod.Jump pod for verifying access tokenkubectl run az-cli -n default -l \"azure.workload.identity/use=true\" --image=mcr.microsoft.com/azure-cli -i --tty --rm --command /usr/bin/env --overrides='{\"spec\": { \"serviceAccount\": \"workload-identity-sa\" }}' -- shaz login --federated-token \"$(cat $AZURE_FEDERATED_TOKEN_FILE)\" --service-principal -u $AZURE_CLIENT_ID -t $AZURE_TENANT_IDaz account get-access-tokenHow to check the pod is labeledkubectl get pods -A -o json | jq -r '[\"Namespace\", \"Pod-Name\"], (.items[] | select(.metadata.labels.\"azure.workload.identity/use\" == \"true\") | [.metadata.namespace, .metadata.name]) | @tsv' | column -tGet all deployments with the labels onkubectl get deployments --all-namespaces -o json | jq -r '.items[] | select(.spec.template.metadata.labels.\"azure.workload.identity/use\" == \"true\") | \"\\(.metadata.namespace) \\(.metadata.name)\"'Token comparisonDisplayed below are three decoded tokens arranged side by side: the first is a standard service account token, the middle one represents an Azure identity token, and the third corresponds to an Azure access token.Limitations You can only have 20 federated identity credentials per managed identity.BookmarksMicrosoft DocsAzure Workload Identity Gihub PagesDeploy ScriptSample Application" }, { "title": "Unveiling the Construction of This Blog", "url": "/blog/2022/04/12/maintain-static-website.html", "categories": "blog", "tags": "blog", "date": "2022-04-12 21:12:22 +0200", "snippet": "When seeking information, we typically turn to the internet and utilize specific keywords for our search. While numerous blog posts are available, a significant portion of them reiterate the same i...", "content": "When seeking information, we typically turn to the internet and utilize specific keywords for our search. While numerous blog posts are available, a significant portion of them reiterate the same information redundantly. Consequently, when I contemplated creating my own posts, I hesitated to contribute yet another to the pool. Nonetheless, I recognized the value of having a repository to store and easily revisit the knowledge I acquire. Furthermore, by sharing it, others in need of similar information can also reap the benefits. I trust that you’ll discover something valuable within these articles.In this post, I’ll explain how I made my blog and added information to it. I’ve experimented with various tools before, such as Hugo, Jekyll, and Gridsome. Eventually, I settled on Jekyll because I came across a fantastic Jekyll theme called “Chirpy” in the theme gallery. This theme is minimal, responsive, and packed with features specifically designed for technical writing. Also the project is actively maintained. Now, let’s delve into the process of installing Jekyll and configuring the Chirpy theme.Install PrerequisitesJekyll is a Ruby Gem that can be installed on most systems. so you will have to install ruby and some prerequisites apps. This can be done by running the command:sudo apt-get install ruby-full build-essential zlib1g-devAdd ENV variablesThe following commands will add environment variables to your ~/.bashrc file to configure the gem installation path.echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrcecho 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrcecho 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrcsource ~/.bashrcInstall Jekyll and bundlerInstall Jekyll and Bundler using the below command.gem install jekyll bundlerCreating a New SiteSign in to GitHub and browse to Chirpy Starter, click the button Use this template &gt; Create a new repository, and name the new repository USERNAME.github.io, where USERNAME represents your GitHub username. While some suggest creating a public repository as USERNAME.github.io, it’s wise to keep the configuration private and copy only the build output’s contents to the public repository. This ensures you share only what you intend.Installing DependenciesBefore running local server for the first time, go to the root directory of your site and runbundleUpdate ConfigurationUpdate the variables of _config.yml as needed. The file can be found at the root of the repository.Create new postsFor Jekyll to render correctly, the file names must be in certain format and the conent should include some metadata. I use the below script for creating new posts which will create a new file based on user inputs. Later you can edit the new file add your content to it.#!/bin/bash# Get current date, year, and monthDATE=$(date +\"%Y-%m-%d\")YEAR=$(date +\"%Y\")MONTH=$(date +\"%m\")DATEFORPOST=$(date -u '+%Y-%m-%d %H:%M:%S %z')# Get title from user inputecho \"Enter the post title:\"read TITLEecho \"Enter the post slug:\"read SLUG# Create year and month directories if they don't existmkdir -p _posts/$YEAR/$MONTH# Create the file with YAML frontmattercat &gt; _posts/$YEAR/$MONTH/$DATE-$SLUG.md &lt;&lt;EOL---title: \"$TITLE\"date: $DATEFORPOSTcategories:- technical-writing- AItags:- azure- kuberneteskeywords:description: \"\"---EOLRunning Local ServerYou may want to preview the site contents before publishing, so just runbundle exec jekyll sAfter a few seconds, the local service will be published at http://127.0.0.1:4000.Build and DeployGo to the root of the source project, and build your site as follows:JEKYLL_ENV=production bundle exec jekyll bUnless you specified the output path, the generated site files will be placed in folder _site of the project’s root directory. Now you should upload those files to the target server. Commit the changes and push to the github repository.If you prefer to keep your configuration and shareable content separate, then copy the contents of the _site folder to a separate repository named USERNAME.github.io. Although GitHub free accounts require USERNAME.github.io to be public, you can still maintain the configuration repository as private.Create a Github pages SiteGithub has it well documented here at this link. Follow the instructions and publish your siteConfigure Custom DomainIf you would like to add a custom domain, you can do so by following the steps from hereBookmarksChirpy Starter GuideAnother site using Chirpy theme" }, { "title": "WSL Bash customization using oh-my-posh", "url": "/wsl/2022/03/01/oh-my-posh-bash.html", "categories": "WSL", "tags": "wsl, kubernetes", "date": "2022-03-01 10:12:22 +0100", "snippet": "In this post, I will explain how I tweaked my bash prompt in WSL using oh-my-posh. Below are the steps I followed to personalize my bash shell.Install oh-my-posh.sudo wget https://github.com/JanDeD...", "content": "In this post, I will explain how I tweaked my bash prompt in WSL using oh-my-posh. Below are the steps I followed to personalize my bash shell.Install oh-my-posh.sudo wget https://github.com/JanDeDobbeleer/oh-my-posh/releases/latest/download/posh-linux-amd64 -O /usr/local/bin/oh-my-poshsudo chmod +x /usr/local/bin/oh-my-poshInstall a font that supports Powerline symbols. Download the Caskaydia Cove Nerd Font. Extract the zip file, select them all and right-click to install. Set the Caskaydia font on the settings of the windows terminal.Navigate to Windows Terminal –&gt; Settings –&gt; Ubuntu –&gt; Appearance –&gt; Font face. Then choose CaskaydiaCove Nerd Font and click save. Get the custom configuration file.mkdir ~/.poshthemesgit clone https://github.com/jobinjosem/oh-my-posh-custom-theme.git ~/.poshthemesConfigure ~/.bashrcAdd the following to ~/.bashrc (could be ~/.profile or ```` depending on your environment)eval \"$(oh-my-posh --init --shell bash --config '~/.poshthemes/mytheme.omp.json')\"Once added, reload your profile for the changes to take effect by running exec bashI got my prompt looks like this after doing these steps.Install kubectx + kubensThis will help to switch between different kubernetes clusters and namespaces, We need to download the kubectx and kubens binaries and install fuzzyfinderwget -LO kubectx.tar.gz https://github.com/ahmetb/kubectx/releases/download/v0.9.4/kubectx_v0.9.4_linux_x86_64.tar.gztar -xvf kubectx.tar.gzchmod +x kubectxmv kubectx /usr/local/bin/wget -LO kubens.tar.gz https://github.com/ahmetb/kubectx/releases/download/v0.9.4/kubens_v0.9.4_linux_x86_64.tar.gztar -xvf kubens.tar.gzchmod +x kubensmv kubens /usr/local/bingit clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf~/.fzf/install Check for newer kubectx and kubens releases before downloading..Create aliasTo enhance your ability to seamlessly transition between different clusters and namespaces, it’s a wise approach to establish aliases. Incorporate the following aliases into your .bashrc filealias x='kubectx'alias n='kubens'source ~/.bashrcAfter adding these aliases, you’ll be able to use x to switch between clusters and n to switch between namespaces, making your interaction with Kubernetes more convenient. A list of available Kubernetes cluster contexts in your kubecfg will be shown.Thanks for reading. Please do share your feedback." } ]
